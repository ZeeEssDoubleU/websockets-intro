import { server as websocketServer } from "websocket";
import http from "http";
import { v4 as uuidv4 } from "uuid";
import { format } from "date-fns/fp";

// set websocket server port
const PORT_websocketServer = 8000;

// spin up http server and the websocket server.
const server = http.createServer();
server.listen(
	PORT_websocketServer,
	console.log(`Server listening on port ${PORT_websocketServer}.`),
);
const wsServer = new websocketServer({ httpServer: server });

// maintain clients - user id (gibberish generated by getUniqueId)
const clients = {};
// maintain users
const users = {};
// maintain shared document and user activity
let editorContent = null;
let userActivity = [];

// generate unique id for every connection
const getUniqueID = () => {
	while (true) {
		const id = uuidv4();
		// make sure client id does NOT exist already
		if (!clients[id]) return id;
	}
};

// format dates
const formatDate = (date) => {
	const local = new Date(date);
	const formatDate = format("M/d/yyyy")(local);
	const formatTime = format("h:mm a")(local);
	return `${formatDate} @ ${formatTime}`;
};

// broadcast message to all connected clients
const sendMessage = (json) => {
	Object.keys(clients).map((client) => {
		clients[client].sendUTF(json);
	});
};

const typesDef = {
	USER_EVENT: "userevent",
	CONTENT_CHANGE: "contentchange",
};

// on connection request
// remains open while connection active
wsServer.on("request", (request) => {
	var user_id = getUniqueID();

	console.log(
		`New connection:`,
		`\n`,
		formatDate(new Date()),
		`\n`,
		`New client connection from origin: ${request.origin}.`,
		`\n`,
	); // ? debug

	// accept connection request (handshake)
	// assign connection in clients
	const connection = request.accept(null, request.origin);
	clients[user_id] = connection;
	console.log(
		`Client connected:`,
		`\n`,
		formatDate(new Date()),
		`\n`,
		`${user_id} added to clients.`,
		`\n`,
	); // ? debug

	// on connection messages
	connection.on("message", (message) => {
		// parse message from client
		if (message.type === "utf8") {
			const dataFromClient = JSON.parse(message.utf8Data);
			const json = { type: dataFromClient.type };

			// if user event (client connecting)
			if (dataFromClient.type === typesDef.USER_EVENT) {
				// add username to users and activity and send back to client
				users[user_id] = dataFromClient.username;
				const action = {
					user: users[user_id],
					action: `Joined to edit the document.`,
				};
				userActivity.push(action);
				json.data = { users, userActivity };
			}
			// if document content changed on client
			else if (dataFromClient.type === typesDef.CONTENT_CHANGE) {
				// format message data
				editorContent = dataFromClient.content;
				json.data = { editorContent, userActivity };
			}

			sendMessage(JSON.stringify(json));
		}
	});

	// on user disconnect
	connection.on("close", (connection) => {
		console.log("users:", users); // ? debug

		console.log(
			`Client disconnected:`,
			`\n`,
			formatDate(new Date()),
			`\n`,
			`${user_id} disconnected.`,
			`\n`,
		); // ? debug

		// check if user_id exists in users
		if (users[user_id]) {
			const action = {
				user: users[user_id],
				action: `Left the document.`,
			};
			userActivity.push(action);
		}

		// delete client from client and users
		// broadcast message to connected clients
		delete clients[user_id];
		delete users[user_id];
		const json = {
			type: typesDef.USER_EVENT,
			data: { users, userActivity },
		};
		sendMessage(JSON.stringify(json));
	});
});
